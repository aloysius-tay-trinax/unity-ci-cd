name: Test, Build, and Release CGS

on:
  push: { branches: master }
  release: { types: [published] }

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}

jobs:
  # tests:
  #   name: Test Code Quality
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Cache Library
  #       uses: actions/cache@v2
  #       with:
  #         path: Library
  #         key: Library
  #     - name: Run EditMode and PlayMode Tests
  #       uses: game-ci/unity-test-runner@main
  #     - name: Publish Test Results
  #       if: ${{ always() }} # Avoid skipping on failed tests
  #       uses: davidmfinol/unity-test-publisher@main
  #       with:
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}

  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    #needs: tests
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # - Android
          - iOS
          - StandaloneOSX
          # - StandaloneLinux64
          # - WebGL
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Build Unity Project
        uses: game-ci/unity-builder@main
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Cgs.Editor.BuildCgs.BuildOptions
          androidAppBundle: true
          androidKeystoreName: finoldigital.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
      - name: Upload Build
        uses: actions/upload-artifact@v2
        if: github.event.ref != 'refs/heads/develop'
        with:
          name: cgs-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  buildWithWindows:
    name: Build for Windows
    runs-on: windows-latest
    #needs: tests
    #if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Install Unity
        uses: crazy-max/ghaction-chocolatey@v1.2.2
        with:
          args: install --yes unity --version=2019.4.5 unity-win-il2cpp --version=2019.4.5 unity-metro --version=2019.4.5
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library
      - name: Build Cgs for Windows
        run: .\scripts\build_windows.ps1
        shell: powershell
        env:
          UnityPath: C:\Program Files\Unity\Editor\Unity.exe
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      # - name: Restore the Wpf application to populate the obj folder
      #   run: msbuild $env:SolutionPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      #   env:
      #     SolutionPath: build\uwp\Card Game Simulator.sln
      #     Configuration: Master
      #     RuntimeIdentifier: win-x64
      # - name: Create .appxupload
      #   if: false
      #   run: msbuild $env:SolutionPath /p:Configuration=$env:Configuration /p:Platform=$env:TargetPlatform /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle
      #   env:
      #     SolutionPath: build\uwp\Card Game Simulator.sln
      #     Configuration: Master
      #     TargetPlatform: x64
      #     BuildMode: StoreUpload
      #     AppxBundle: Always
      - name: Upload cgs-windows32
        uses: actions/upload-artifact@v2
        if: github.event.ref != 'refs/heads/develop'
        with:
          name: cgs-windows32
          path: build/cgs-windows32
      - name: Upload cgs-windows64
        uses: actions/upload-artifact@v2
        if: github.event.ref != 'refs/heads/develop'
        with:
          name: cgs-windows64
          path: build/cgs-windows64
      # - name: Upload .appxupload
      #   uses: actions/upload-artifact@v2
      #   if: false
      #   with:
      #     name: cgs.appxupload
      #     path: build/uwp/AppPackages/Card Game Simulator/Card Game Simulator_1.35.0.0_Master_Test/Card Game Simulator_1.35.0.0_x86_x64_arm_Master.appxupload

  releaseToGooglePlay:
    name: Release to the Google Play Store
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published'
    env:
      GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
      GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/api-finoldigital.json', github.workspace) }}
      ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android/Android.aab', github.workspace) }}
      ANDROID_PACKAGE_NAME: com.finoldigital.cardgamesim
      RELEASE_NOTES: ${{ github.event.release.body }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-Android
          path: build/Android
      - name: Prepare for Upload
        run: |
          echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH
          echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
      - name: Upload to Google Play
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: 'android playstore'

  releaseToAppStore:
    name: Release to the App Store
    runs-on: macos-latest
    needs: buildWithLinux
    if: github.event.action == 'published'
    env:
      APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
      APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      MAC_APPLICATION_CERTIFICATE: ${{ secrets.MAC_APPLICATION_CERTIFICATE }}
      MAC_APPLICATION_PASSWORD: ${{ secrets.MAC_APPLICATION_PASSWORD }}
      MAC_INSTALLER_CERTIFICATE: ${{ secrets.MAC_INSTALLER_CERTIFICATE }}
      MAC_INSTALLER_PASSWORD: ${{ secrets.MAC_INSTALLER_PASSWORD }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
      MATCH_URL: ${{ secrets.MATCH_URL }}
      IOS_APP_ID: com.finoldigital.CardGameSim
      IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
      MAC_APP_ID: com.finoldigital.CardGameSimulator
      MAC_BUILD_PATH: ${{ format('{0}/build/StandaloneOSX', github.workspace) }}
      PROJECT_NAME: Card Game Simulator
      RELEASE_NOTES: ${{ github.event.release.body }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-iOS
          path: build/iOS
      - name: Download StandaloneOSX Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-StandaloneOSX
          path: build/StandaloneOSX
      - name: Fix version for StandaloneOSX
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: 'fixversion'
      - name: Prepare for Upload
        run: |
          find $IOS_BUILD_PATH -type f -iname "*.sh" -exec chmod +x {} \;
          find $MAC_BUILD_PATH -type f -iname "*.sh" -exec chmod +x {} \;
          chmod +x scripts/sign-osx-build.sh
          ./scripts/sign-osx-build.sh
      - name: Upload to the App Store
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: 'ios release'
      - name: Upload to the Mac App Store
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: 'mac macupload'

  releaseToGitHubPages:
    name: Release to GitHub Pages
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download WebGL Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-WebGL
          path: build/WebGL
      - name: Commit and Push to GitHub Pages
        run: |
          git config --local user.name "$(git log --format='%an' HEAD^!)"
          git config --local user.email "$(git log --format='%ae' HEAD^!)"
          cp build/WebGL/Build/* docs/WebGL
          git add docs/WebGL
          git commit -m "Release to GitHub Pages"
          git push
